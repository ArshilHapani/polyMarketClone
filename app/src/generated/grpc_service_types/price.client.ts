// @generated by protobuf-ts 2.10.0 with parameter generate_dependencies,long_type_number
// @generated from protobuf file "price.proto" (package "price", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { PriceService } from "./price";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetMarketPriceDataWithinIntervalResponse } from "./price";
import type { GetPriceDataWithinIntervalRequest } from "./price";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service price.PriceService
 */
export interface IPriceServiceClient {
    /**
     * @generated from protobuf rpc: GetPriceDataWithinInterval(price.GetPriceDataWithinIntervalRequest) returns (price.GetMarketPriceDataWithinIntervalResponse);
     */
    getPriceDataWithinInterval(input: GetPriceDataWithinIntervalRequest, options?: RpcOptions): UnaryCall<GetPriceDataWithinIntervalRequest, GetMarketPriceDataWithinIntervalResponse>;
}
/**
 * @generated from protobuf service price.PriceService
 */
export class PriceServiceClient implements IPriceServiceClient, ServiceInfo {
    typeName = PriceService.typeName;
    methods = PriceService.methods;
    options = PriceService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetPriceDataWithinInterval(price.GetPriceDataWithinIntervalRequest) returns (price.GetMarketPriceDataWithinIntervalResponse);
     */
    getPriceDataWithinInterval(input: GetPriceDataWithinIntervalRequest, options?: RpcOptions): UnaryCall<GetPriceDataWithinIntervalRequest, GetMarketPriceDataWithinIntervalResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPriceDataWithinIntervalRequest, GetMarketPriceDataWithinIntervalResponse>("unary", this._transport, method, opt, input);
    }
}
