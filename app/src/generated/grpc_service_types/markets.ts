// @generated by protobuf-ts 2.10.0 with parameter generate_dependencies,long_type_number
// @generated from protobuf file "markets.proto" (package "markets", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PageInfo } from "./common";
import { PageRequest } from "./common";
/**
 * @generated from protobuf message markets.OrderLevel
 */
export interface OrderLevel {
    /**
     * @generated from protobuf field: double price = 1;
     */
    price: number; // Price of the order
    /**
     * @generated from protobuf field: double shares = 2;
     */
    shares: number; // Total quantity of shares at this price
    /**
     * @generated from protobuf field: uint32 users = 3;
     */
    users: number; // Number of users at this price (histogram)
}
/**
 * @generated from protobuf message markets.RequestWithMarketIdAndPageRequest
 */
export interface RequestWithMarketIdAndPageRequest {
    /**
     * @generated from protobuf field: string market_id = 1;
     */
    marketId: string; // ID of the market
    /**
     * @generated from protobuf field: common.PageRequest page_request = 2;
     */
    pageRequest?: PageRequest; // Pagination request
}
/**
 * @generated from protobuf message markets.MarketTrade
 */
export interface MarketTrade {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string avatar = 3;
     */
    avatar: string;
    /**
     * @generated from protobuf field: string email = 4;
     */
    email: string;
    /**
     * @generated from protobuf field: markets.TradeType trade_type = 5;
     */
    tradeType: TradeType;
    /**
     * @generated from protobuf field: markets.Outcome outcome = 6;
     */
    outcome: Outcome;
    /**
     * @generated from protobuf field: double price = 7;
     */
    price: number;
    /**
     * @generated from protobuf field: double quantity = 8;
     */
    quantity: number;
    /**
     * @generated from protobuf field: string created_at = 9;
     */
    createdAt: string;
}
/**
 * @generated from protobuf message markets.GetMarketTradesResponse
 */
export interface GetMarketTradesResponse {
    /**
     * @generated from protobuf field: string market_id = 1;
     */
    marketId: string; // ID of the market
    /**
     * @generated from protobuf field: repeated markets.MarketTrade trades = 2;
     */
    trades: MarketTrade[]; // List of trades for the market
    /**
     * @generated from protobuf field: common.PageInfo page_info = 3;
     */
    pageInfo?: PageInfo; // Pagination info
}
/**
 * @generated from protobuf message markets.OrderBook
 */
export interface OrderBook {
    /**
     * @generated from protobuf field: repeated markets.OrderLevel bids = 1;
     */
    bids: OrderLevel[];
    /**
     * @generated from protobuf field: repeated markets.OrderLevel asks = 2;
     */
    asks: OrderLevel[];
}
/**
 * @generated from protobuf message markets.GetMarketBookResponse
 */
export interface GetMarketBookResponse {
    /**
     * @generated from protobuf field: string market_id = 1;
     */
    marketId: string; // ID of the market
    /**
     * @generated from protobuf field: markets.OrderBook yes_book = 2;
     */
    yesBook?: OrderBook; // Order book for YES outcome
    /**
     * @generated from protobuf field: markets.OrderBook no_book = 3;
     */
    noBook?: OrderBook; // Order book for NO outcome
}
/**
 * @generated from protobuf message markets.RequestWithMarketId
 */
export interface RequestWithMarketId {
    /**
     * @generated from protobuf field: string market_id = 1;
     */
    marketId: string;
}
/**
 * @generated from protobuf message markets.RequestForMarketBook
 */
export interface RequestForMarketBook {
    /**
     * @generated from protobuf field: string market_id = 1;
     */
    marketId: string;
    /**
     * @generated from protobuf field: uint32 depth = 2;
     */
    depth: number;
}
/**
 * @generated from protobuf message markets.Market
 */
export interface Market {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: string logo = 4;
     */
    logo: string;
    /**
     * @generated from protobuf field: markets.MarketStatus status = 5;
     */
    status: MarketStatus;
    /**
     * @generated from protobuf field: double liquidity_b = 6;
     */
    liquidityB: number;
    /**
     * @generated from protobuf field: markets.Outcome final_outcome = 7;
     */
    finalOutcome: Outcome;
    /**
     * @generated from protobuf field: string created_at = 8;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updated_at = 9;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string market_expiry = 10;
     */
    marketExpiry: string;
    /**
     * @generated from protobuf field: float yes_price = 11;
     */
    yesPrice: number;
    /**
     * @generated from protobuf field: float no_price = 12;
     */
    noPrice: number;
}
/**
 * @generated from protobuf message markets.VolumeInfo
 */
export interface VolumeInfo {
    /**
     * @generated from protobuf field: string market_id = 1;
     */
    marketId: string;
    /**
     * @generated from protobuf field: double yes_buy_qty = 2;
     */
    yesBuyQty: number;
    /**
     * @generated from protobuf field: double yes_buy_usd = 3;
     */
    yesBuyUsd: number;
    /**
     * @generated from protobuf field: double yes_sell_qty = 4;
     */
    yesSellQty: number;
    /**
     * @generated from protobuf field: double yes_sell_usd = 5;
     */
    yesSellUsd: number;
    /**
     * @generated from protobuf field: double no_buy_qty = 6;
     */
    noBuyQty: number;
    /**
     * @generated from protobuf field: double no_buy_usd = 7;
     */
    noBuyUsd: number;
    /**
     * @generated from protobuf field: double no_sell_qty = 8;
     */
    noSellQty: number;
    /**
     * @generated from protobuf field: double no_sell_usd = 9;
     */
    noSellUsd: number;
}
/**
 * @generated from protobuf message markets.MarketPrice
 */
export interface MarketPrice {
    /**
     * @generated from protobuf field: string market_id = 1;
     */
    marketId: string;
    /**
     * @generated from protobuf field: double latest_yes_price = 2;
     */
    latestYesPrice: number;
    /**
     * @generated from protobuf field: double latest_no_price = 3;
     */
    latestNoPrice: number;
}
/**
 * @generated from protobuf message markets.GetMarketByIdResponse
 */
export interface GetMarketByIdResponse {
    /**
     * @generated from protobuf field: markets.Market market = 1;
     */
    market?: Market;
    /**
     * @generated from protobuf field: markets.VolumeInfo volume_info = 2;
     */
    volumeInfo?: VolumeInfo;
    /**
     * @generated from protobuf field: markets.MarketPrice market_price = 3;
     */
    marketPrice?: MarketPrice;
}
/**
 * @generated from protobuf message markets.UserWithTotalHoldings
 */
export interface UserWithTotalHoldings {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: double total_shares = 2;
     */
    totalShares: number;
    /**
     * @generated from protobuf field: double total_yes_shares = 3;
     */
    totalYesShares: number;
    /**
     * @generated from protobuf field: double total_no_shares = 4;
     */
    totalNoShares: number;
    /**
     * @generated from protobuf field: string username = 5;
     */
    username: string;
    /**
     * @generated from protobuf field: string avatar = 6;
     */
    avatar: string;
}
/**
 * @generated from protobuf message markets.GetTopHoldersResponse
 */
export interface GetTopHoldersResponse {
    /**
     * @generated from protobuf field: string market_id = 1;
     */
    marketId: string;
    /**
     * @generated from protobuf field: repeated markets.UserWithTotalHoldings top_holders = 2;
     */
    topHolders: UserWithTotalHoldings[];
}
/**
 * @generated from protobuf message markets.GetPaginatedMarketResponse
 */
export interface GetPaginatedMarketResponse {
    /**
     * @generated from protobuf field: repeated markets.Market markets = 1;
     */
    markets: Market[];
    /**
     * @generated from protobuf field: common.PageInfo pageInfo = 2;
     */
    pageInfo?: PageInfo;
}
/**
 * @generated from protobuf enum markets.MarketStatus
 */
export enum MarketStatus {
    /**
     * @generated from protobuf enum value: UNSPECIFIED_MARKET_STATUS = 0;
     */
    UNSPECIFIED_MARKET_STATUS = 0,
    /**
     * @generated from protobuf enum value: OPEN = 1;
     */
    OPEN = 1,
    /**
     * @generated from protobuf enum value: CLOSED = 2;
     */
    CLOSED = 2,
    /**
     * @generated from protobuf enum value: SETTLED = 3;
     */
    SETTLED = 3
}
/**
 * @generated from protobuf enum markets.Outcome
 */
export enum Outcome {
    /**
     * @generated from protobuf enum value: UNSPECIFIED_OUTCOME = 0;
     */
    UNSPECIFIED_OUTCOME = 0,
    /**
     * @generated from protobuf enum value: YES = 1;
     */
    YES = 1,
    /**
     * @generated from protobuf enum value: NO = 2;
     */
    NO = 2,
    /**
     * @generated from protobuf enum value: UNSPECIFIED = 3;
     */
    UNSPECIFIED = 3
}
/**
 * @generated from protobuf enum markets.TradeType
 */
export enum TradeType {
    /**
     * @generated from protobuf enum value: UNSPECIFIED_TRADE_TYPE = 0;
     */
    UNSPECIFIED_TRADE_TYPE = 0,
    /**
     * Buy trade
     *
     * @generated from protobuf enum value: BUY = 1;
     */
    BUY = 1,
    /**
     * Sell trade
     *
     * @generated from protobuf enum value: SELL = 2;
     */
    SELL = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class OrderLevel$Type extends MessageType<OrderLevel> {
    constructor() {
        super("markets.OrderLevel", [
            { no: 1, name: "price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "shares", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "users", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<OrderLevel>): OrderLevel {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.price = 0;
        message.shares = 0;
        message.users = 0;
        if (value !== undefined)
            reflectionMergePartial<OrderLevel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderLevel): OrderLevel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double price */ 1:
                    message.price = reader.double();
                    break;
                case /* double shares */ 2:
                    message.shares = reader.double();
                    break;
                case /* uint32 users */ 3:
                    message.users = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderLevel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double price = 1; */
        if (message.price !== 0)
            writer.tag(1, WireType.Bit64).double(message.price);
        /* double shares = 2; */
        if (message.shares !== 0)
            writer.tag(2, WireType.Bit64).double(message.shares);
        /* uint32 users = 3; */
        if (message.users !== 0)
            writer.tag(3, WireType.Varint).uint32(message.users);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message markets.OrderLevel
 */
export const OrderLevel = new OrderLevel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestWithMarketIdAndPageRequest$Type extends MessageType<RequestWithMarketIdAndPageRequest> {
    constructor() {
        super("markets.RequestWithMarketIdAndPageRequest", [
            { no: 1, name: "market_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "page_request", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<RequestWithMarketIdAndPageRequest>): RequestWithMarketIdAndPageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.marketId = "";
        if (value !== undefined)
            reflectionMergePartial<RequestWithMarketIdAndPageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestWithMarketIdAndPageRequest): RequestWithMarketIdAndPageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string market_id */ 1:
                    message.marketId = reader.string();
                    break;
                case /* common.PageRequest page_request */ 2:
                    message.pageRequest = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pageRequest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestWithMarketIdAndPageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string market_id = 1; */
        if (message.marketId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.marketId);
        /* common.PageRequest page_request = 2; */
        if (message.pageRequest)
            PageRequest.internalBinaryWrite(message.pageRequest, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message markets.RequestWithMarketIdAndPageRequest
 */
export const RequestWithMarketIdAndPageRequest = new RequestWithMarketIdAndPageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarketTrade$Type extends MessageType<MarketTrade> {
    constructor() {
        super("markets.MarketTrade", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "avatar", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "trade_type", kind: "enum", T: () => ["markets.TradeType", TradeType] },
            { no: 6, name: "outcome", kind: "enum", T: () => ["markets.Outcome", Outcome] },
            { no: 7, name: "price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "quantity", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MarketTrade>): MarketTrade {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.avatar = "";
        message.email = "";
        message.tradeType = 0;
        message.outcome = 0;
        message.price = 0;
        message.quantity = 0;
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<MarketTrade>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarketTrade): MarketTrade {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string avatar */ 3:
                    message.avatar = reader.string();
                    break;
                case /* string email */ 4:
                    message.email = reader.string();
                    break;
                case /* markets.TradeType trade_type */ 5:
                    message.tradeType = reader.int32();
                    break;
                case /* markets.Outcome outcome */ 6:
                    message.outcome = reader.int32();
                    break;
                case /* double price */ 7:
                    message.price = reader.double();
                    break;
                case /* double quantity */ 8:
                    message.quantity = reader.double();
                    break;
                case /* string created_at */ 9:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarketTrade, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string avatar = 3; */
        if (message.avatar !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.avatar);
        /* string email = 4; */
        if (message.email !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.email);
        /* markets.TradeType trade_type = 5; */
        if (message.tradeType !== 0)
            writer.tag(5, WireType.Varint).int32(message.tradeType);
        /* markets.Outcome outcome = 6; */
        if (message.outcome !== 0)
            writer.tag(6, WireType.Varint).int32(message.outcome);
        /* double price = 7; */
        if (message.price !== 0)
            writer.tag(7, WireType.Bit64).double(message.price);
        /* double quantity = 8; */
        if (message.quantity !== 0)
            writer.tag(8, WireType.Bit64).double(message.quantity);
        /* string created_at = 9; */
        if (message.createdAt !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message markets.MarketTrade
 */
export const MarketTrade = new MarketTrade$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMarketTradesResponse$Type extends MessageType<GetMarketTradesResponse> {
    constructor() {
        super("markets.GetMarketTradesResponse", [
            { no: 1, name: "market_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "trades", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => MarketTrade },
            { no: 3, name: "page_info", kind: "message", T: () => PageInfo }
        ]);
    }
    create(value?: PartialMessage<GetMarketTradesResponse>): GetMarketTradesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.marketId = "";
        message.trades = [];
        if (value !== undefined)
            reflectionMergePartial<GetMarketTradesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMarketTradesResponse): GetMarketTradesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string market_id */ 1:
                    message.marketId = reader.string();
                    break;
                case /* repeated markets.MarketTrade trades */ 2:
                    message.trades.push(MarketTrade.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* common.PageInfo page_info */ 3:
                    message.pageInfo = PageInfo.internalBinaryRead(reader, reader.uint32(), options, message.pageInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMarketTradesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string market_id = 1; */
        if (message.marketId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.marketId);
        /* repeated markets.MarketTrade trades = 2; */
        for (let i = 0; i < message.trades.length; i++)
            MarketTrade.internalBinaryWrite(message.trades[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* common.PageInfo page_info = 3; */
        if (message.pageInfo)
            PageInfo.internalBinaryWrite(message.pageInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message markets.GetMarketTradesResponse
 */
export const GetMarketTradesResponse = new GetMarketTradesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderBook$Type extends MessageType<OrderBook> {
    constructor() {
        super("markets.OrderBook", [
            { no: 1, name: "bids", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => OrderLevel },
            { no: 2, name: "asks", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => OrderLevel }
        ]);
    }
    create(value?: PartialMessage<OrderBook>): OrderBook {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bids = [];
        message.asks = [];
        if (value !== undefined)
            reflectionMergePartial<OrderBook>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderBook): OrderBook {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated markets.OrderLevel bids */ 1:
                    message.bids.push(OrderLevel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated markets.OrderLevel asks */ 2:
                    message.asks.push(OrderLevel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderBook, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated markets.OrderLevel bids = 1; */
        for (let i = 0; i < message.bids.length; i++)
            OrderLevel.internalBinaryWrite(message.bids[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated markets.OrderLevel asks = 2; */
        for (let i = 0; i < message.asks.length; i++)
            OrderLevel.internalBinaryWrite(message.asks[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message markets.OrderBook
 */
export const OrderBook = new OrderBook$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMarketBookResponse$Type extends MessageType<GetMarketBookResponse> {
    constructor() {
        super("markets.GetMarketBookResponse", [
            { no: 1, name: "market_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "yes_book", kind: "message", T: () => OrderBook },
            { no: 3, name: "no_book", kind: "message", T: () => OrderBook }
        ]);
    }
    create(value?: PartialMessage<GetMarketBookResponse>): GetMarketBookResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.marketId = "";
        if (value !== undefined)
            reflectionMergePartial<GetMarketBookResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMarketBookResponse): GetMarketBookResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string market_id */ 1:
                    message.marketId = reader.string();
                    break;
                case /* markets.OrderBook yes_book */ 2:
                    message.yesBook = OrderBook.internalBinaryRead(reader, reader.uint32(), options, message.yesBook);
                    break;
                case /* markets.OrderBook no_book */ 3:
                    message.noBook = OrderBook.internalBinaryRead(reader, reader.uint32(), options, message.noBook);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMarketBookResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string market_id = 1; */
        if (message.marketId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.marketId);
        /* markets.OrderBook yes_book = 2; */
        if (message.yesBook)
            OrderBook.internalBinaryWrite(message.yesBook, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* markets.OrderBook no_book = 3; */
        if (message.noBook)
            OrderBook.internalBinaryWrite(message.noBook, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message markets.GetMarketBookResponse
 */
export const GetMarketBookResponse = new GetMarketBookResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestWithMarketId$Type extends MessageType<RequestWithMarketId> {
    constructor() {
        super("markets.RequestWithMarketId", [
            { no: 1, name: "market_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RequestWithMarketId>): RequestWithMarketId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.marketId = "";
        if (value !== undefined)
            reflectionMergePartial<RequestWithMarketId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestWithMarketId): RequestWithMarketId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string market_id */ 1:
                    message.marketId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestWithMarketId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string market_id = 1; */
        if (message.marketId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.marketId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message markets.RequestWithMarketId
 */
export const RequestWithMarketId = new RequestWithMarketId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestForMarketBook$Type extends MessageType<RequestForMarketBook> {
    constructor() {
        super("markets.RequestForMarketBook", [
            { no: 1, name: "market_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "depth", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RequestForMarketBook>): RequestForMarketBook {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.marketId = "";
        message.depth = 0;
        if (value !== undefined)
            reflectionMergePartial<RequestForMarketBook>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestForMarketBook): RequestForMarketBook {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string market_id */ 1:
                    message.marketId = reader.string();
                    break;
                case /* uint32 depth */ 2:
                    message.depth = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestForMarketBook, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string market_id = 1; */
        if (message.marketId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.marketId);
        /* uint32 depth = 2; */
        if (message.depth !== 0)
            writer.tag(2, WireType.Varint).uint32(message.depth);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message markets.RequestForMarketBook
 */
export const RequestForMarketBook = new RequestForMarketBook$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Market$Type extends MessageType<Market> {
    constructor() {
        super("markets.Market", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "logo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "status", kind: "enum", T: () => ["markets.MarketStatus", MarketStatus] },
            { no: 6, name: "liquidity_b", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "final_outcome", kind: "enum", T: () => ["markets.Outcome", Outcome] },
            { no: 8, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "market_expiry", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "yes_price", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 12, name: "no_price", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<Market>): Market {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.description = "";
        message.logo = "";
        message.status = 0;
        message.liquidityB = 0;
        message.finalOutcome = 0;
        message.createdAt = "";
        message.updatedAt = "";
        message.marketExpiry = "";
        message.yesPrice = 0;
        message.noPrice = 0;
        if (value !== undefined)
            reflectionMergePartial<Market>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Market): Market {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* string logo */ 4:
                    message.logo = reader.string();
                    break;
                case /* markets.MarketStatus status */ 5:
                    message.status = reader.int32();
                    break;
                case /* double liquidity_b */ 6:
                    message.liquidityB = reader.double();
                    break;
                case /* markets.Outcome final_outcome */ 7:
                    message.finalOutcome = reader.int32();
                    break;
                case /* string created_at */ 8:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 9:
                    message.updatedAt = reader.string();
                    break;
                case /* string market_expiry */ 10:
                    message.marketExpiry = reader.string();
                    break;
                case /* float yes_price */ 11:
                    message.yesPrice = reader.float();
                    break;
                case /* float no_price */ 12:
                    message.noPrice = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Market, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* string logo = 4; */
        if (message.logo !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.logo);
        /* markets.MarketStatus status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).int32(message.status);
        /* double liquidity_b = 6; */
        if (message.liquidityB !== 0)
            writer.tag(6, WireType.Bit64).double(message.liquidityB);
        /* markets.Outcome final_outcome = 7; */
        if (message.finalOutcome !== 0)
            writer.tag(7, WireType.Varint).int32(message.finalOutcome);
        /* string created_at = 8; */
        if (message.createdAt !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 9; */
        if (message.updatedAt !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.updatedAt);
        /* string market_expiry = 10; */
        if (message.marketExpiry !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.marketExpiry);
        /* float yes_price = 11; */
        if (message.yesPrice !== 0)
            writer.tag(11, WireType.Bit32).float(message.yesPrice);
        /* float no_price = 12; */
        if (message.noPrice !== 0)
            writer.tag(12, WireType.Bit32).float(message.noPrice);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message markets.Market
 */
export const Market = new Market$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VolumeInfo$Type extends MessageType<VolumeInfo> {
    constructor() {
        super("markets.VolumeInfo", [
            { no: 1, name: "market_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "yes_buy_qty", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "yes_buy_usd", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "yes_sell_qty", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "yes_sell_usd", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "no_buy_qty", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "no_buy_usd", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "no_sell_qty", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "no_sell_usd", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<VolumeInfo>): VolumeInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.marketId = "";
        message.yesBuyQty = 0;
        message.yesBuyUsd = 0;
        message.yesSellQty = 0;
        message.yesSellUsd = 0;
        message.noBuyQty = 0;
        message.noBuyUsd = 0;
        message.noSellQty = 0;
        message.noSellUsd = 0;
        if (value !== undefined)
            reflectionMergePartial<VolumeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VolumeInfo): VolumeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string market_id */ 1:
                    message.marketId = reader.string();
                    break;
                case /* double yes_buy_qty */ 2:
                    message.yesBuyQty = reader.double();
                    break;
                case /* double yes_buy_usd */ 3:
                    message.yesBuyUsd = reader.double();
                    break;
                case /* double yes_sell_qty */ 4:
                    message.yesSellQty = reader.double();
                    break;
                case /* double yes_sell_usd */ 5:
                    message.yesSellUsd = reader.double();
                    break;
                case /* double no_buy_qty */ 6:
                    message.noBuyQty = reader.double();
                    break;
                case /* double no_buy_usd */ 7:
                    message.noBuyUsd = reader.double();
                    break;
                case /* double no_sell_qty */ 8:
                    message.noSellQty = reader.double();
                    break;
                case /* double no_sell_usd */ 9:
                    message.noSellUsd = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VolumeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string market_id = 1; */
        if (message.marketId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.marketId);
        /* double yes_buy_qty = 2; */
        if (message.yesBuyQty !== 0)
            writer.tag(2, WireType.Bit64).double(message.yesBuyQty);
        /* double yes_buy_usd = 3; */
        if (message.yesBuyUsd !== 0)
            writer.tag(3, WireType.Bit64).double(message.yesBuyUsd);
        /* double yes_sell_qty = 4; */
        if (message.yesSellQty !== 0)
            writer.tag(4, WireType.Bit64).double(message.yesSellQty);
        /* double yes_sell_usd = 5; */
        if (message.yesSellUsd !== 0)
            writer.tag(5, WireType.Bit64).double(message.yesSellUsd);
        /* double no_buy_qty = 6; */
        if (message.noBuyQty !== 0)
            writer.tag(6, WireType.Bit64).double(message.noBuyQty);
        /* double no_buy_usd = 7; */
        if (message.noBuyUsd !== 0)
            writer.tag(7, WireType.Bit64).double(message.noBuyUsd);
        /* double no_sell_qty = 8; */
        if (message.noSellQty !== 0)
            writer.tag(8, WireType.Bit64).double(message.noSellQty);
        /* double no_sell_usd = 9; */
        if (message.noSellUsd !== 0)
            writer.tag(9, WireType.Bit64).double(message.noSellUsd);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message markets.VolumeInfo
 */
export const VolumeInfo = new VolumeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarketPrice$Type extends MessageType<MarketPrice> {
    constructor() {
        super("markets.MarketPrice", [
            { no: 1, name: "market_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "latest_yes_price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "latest_no_price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<MarketPrice>): MarketPrice {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.marketId = "";
        message.latestYesPrice = 0;
        message.latestNoPrice = 0;
        if (value !== undefined)
            reflectionMergePartial<MarketPrice>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarketPrice): MarketPrice {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string market_id */ 1:
                    message.marketId = reader.string();
                    break;
                case /* double latest_yes_price */ 2:
                    message.latestYesPrice = reader.double();
                    break;
                case /* double latest_no_price */ 3:
                    message.latestNoPrice = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarketPrice, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string market_id = 1; */
        if (message.marketId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.marketId);
        /* double latest_yes_price = 2; */
        if (message.latestYesPrice !== 0)
            writer.tag(2, WireType.Bit64).double(message.latestYesPrice);
        /* double latest_no_price = 3; */
        if (message.latestNoPrice !== 0)
            writer.tag(3, WireType.Bit64).double(message.latestNoPrice);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message markets.MarketPrice
 */
export const MarketPrice = new MarketPrice$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMarketByIdResponse$Type extends MessageType<GetMarketByIdResponse> {
    constructor() {
        super("markets.GetMarketByIdResponse", [
            { no: 1, name: "market", kind: "message", T: () => Market },
            { no: 2, name: "volume_info", kind: "message", T: () => VolumeInfo },
            { no: 3, name: "market_price", kind: "message", T: () => MarketPrice }
        ]);
    }
    create(value?: PartialMessage<GetMarketByIdResponse>): GetMarketByIdResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetMarketByIdResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMarketByIdResponse): GetMarketByIdResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* markets.Market market */ 1:
                    message.market = Market.internalBinaryRead(reader, reader.uint32(), options, message.market);
                    break;
                case /* markets.VolumeInfo volume_info */ 2:
                    message.volumeInfo = VolumeInfo.internalBinaryRead(reader, reader.uint32(), options, message.volumeInfo);
                    break;
                case /* markets.MarketPrice market_price */ 3:
                    message.marketPrice = MarketPrice.internalBinaryRead(reader, reader.uint32(), options, message.marketPrice);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMarketByIdResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* markets.Market market = 1; */
        if (message.market)
            Market.internalBinaryWrite(message.market, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* markets.VolumeInfo volume_info = 2; */
        if (message.volumeInfo)
            VolumeInfo.internalBinaryWrite(message.volumeInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* markets.MarketPrice market_price = 3; */
        if (message.marketPrice)
            MarketPrice.internalBinaryWrite(message.marketPrice, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message markets.GetMarketByIdResponse
 */
export const GetMarketByIdResponse = new GetMarketByIdResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserWithTotalHoldings$Type extends MessageType<UserWithTotalHoldings> {
    constructor() {
        super("markets.UserWithTotalHoldings", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "total_shares", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "total_yes_shares", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "total_no_shares", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "avatar", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserWithTotalHoldings>): UserWithTotalHoldings {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.totalShares = 0;
        message.totalYesShares = 0;
        message.totalNoShares = 0;
        message.username = "";
        message.avatar = "";
        if (value !== undefined)
            reflectionMergePartial<UserWithTotalHoldings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserWithTotalHoldings): UserWithTotalHoldings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* double total_shares */ 2:
                    message.totalShares = reader.double();
                    break;
                case /* double total_yes_shares */ 3:
                    message.totalYesShares = reader.double();
                    break;
                case /* double total_no_shares */ 4:
                    message.totalNoShares = reader.double();
                    break;
                case /* string username */ 5:
                    message.username = reader.string();
                    break;
                case /* string avatar */ 6:
                    message.avatar = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserWithTotalHoldings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* double total_shares = 2; */
        if (message.totalShares !== 0)
            writer.tag(2, WireType.Bit64).double(message.totalShares);
        /* double total_yes_shares = 3; */
        if (message.totalYesShares !== 0)
            writer.tag(3, WireType.Bit64).double(message.totalYesShares);
        /* double total_no_shares = 4; */
        if (message.totalNoShares !== 0)
            writer.tag(4, WireType.Bit64).double(message.totalNoShares);
        /* string username = 5; */
        if (message.username !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.username);
        /* string avatar = 6; */
        if (message.avatar !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.avatar);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message markets.UserWithTotalHoldings
 */
export const UserWithTotalHoldings = new UserWithTotalHoldings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTopHoldersResponse$Type extends MessageType<GetTopHoldersResponse> {
    constructor() {
        super("markets.GetTopHoldersResponse", [
            { no: 1, name: "market_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "top_holders", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UserWithTotalHoldings }
        ]);
    }
    create(value?: PartialMessage<GetTopHoldersResponse>): GetTopHoldersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.marketId = "";
        message.topHolders = [];
        if (value !== undefined)
            reflectionMergePartial<GetTopHoldersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTopHoldersResponse): GetTopHoldersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string market_id */ 1:
                    message.marketId = reader.string();
                    break;
                case /* repeated markets.UserWithTotalHoldings top_holders */ 2:
                    message.topHolders.push(UserWithTotalHoldings.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTopHoldersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string market_id = 1; */
        if (message.marketId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.marketId);
        /* repeated markets.UserWithTotalHoldings top_holders = 2; */
        for (let i = 0; i < message.topHolders.length; i++)
            UserWithTotalHoldings.internalBinaryWrite(message.topHolders[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message markets.GetTopHoldersResponse
 */
export const GetTopHoldersResponse = new GetTopHoldersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPaginatedMarketResponse$Type extends MessageType<GetPaginatedMarketResponse> {
    constructor() {
        super("markets.GetPaginatedMarketResponse", [
            { no: 1, name: "markets", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Market },
            { no: 2, name: "pageInfo", kind: "message", T: () => PageInfo }
        ]);
    }
    create(value?: PartialMessage<GetPaginatedMarketResponse>): GetPaginatedMarketResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.markets = [];
        if (value !== undefined)
            reflectionMergePartial<GetPaginatedMarketResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPaginatedMarketResponse): GetPaginatedMarketResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated markets.Market markets */ 1:
                    message.markets.push(Market.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* common.PageInfo pageInfo */ 2:
                    message.pageInfo = PageInfo.internalBinaryRead(reader, reader.uint32(), options, message.pageInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPaginatedMarketResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated markets.Market markets = 1; */
        for (let i = 0; i < message.markets.length; i++)
            Market.internalBinaryWrite(message.markets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* common.PageInfo pageInfo = 2; */
        if (message.pageInfo)
            PageInfo.internalBinaryWrite(message.pageInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message markets.GetPaginatedMarketResponse
 */
export const GetPaginatedMarketResponse = new GetPaginatedMarketResponse$Type();
/**
 * @generated ServiceType for protobuf service markets.MarketService
 */
export const MarketService = new ServiceType("markets.MarketService", [
    { name: "GetMarketData", options: {}, I: PageRequest, O: GetPaginatedMarketResponse },
    { name: "GetMarketById", options: {}, I: RequestWithMarketId, O: GetMarketByIdResponse },
    { name: "GetMarketBook", options: {}, I: RequestForMarketBook, O: GetMarketBookResponse },
    { name: "GetTopHolders", options: {}, I: RequestWithMarketId, O: GetTopHoldersResponse },
    { name: "GetMarketTrades", options: {}, I: RequestWithMarketIdAndPageRequest, O: GetMarketTradesResponse }
]);
