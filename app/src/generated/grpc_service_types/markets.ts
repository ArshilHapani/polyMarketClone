// @generated by protobuf-ts 2.10.0 with parameter generate_dependencies,long_type_number
// @generated from protobuf file "markets.proto" (package "markets", syntax proto3)
// tslint:disable
import { PageRequest } from "./common";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PageInfo } from "./common";
/**
 * @generated from protobuf message markets.Market
 */
export interface Market {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 3;
     */
    description: string;
    /**
     * @generated from protobuf field: string logo = 4;
     */
    logo: string;
    /**
     * @generated from protobuf field: markets.MarketStatus status = 5;
     */
    status: MarketStatus;
    /**
     * @generated from protobuf field: double liquidity_b = 6;
     */
    liquidityB: number;
    /**
     * @generated from protobuf field: markets.Outcome final_outcome = 7;
     */
    finalOutcome: Outcome;
    /**
     * @generated from protobuf field: string created_at = 8;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updated_at = 9;
     */
    updatedAt: string;
}
/**
 * @generated from protobuf message markets.GetPaginatedMarketResponse
 */
export interface GetPaginatedMarketResponse {
    /**
     * @generated from protobuf field: repeated markets.Market markets = 1;
     */
    markets: Market[];
    /**
     * @generated from protobuf field: common.PageInfo pageInfo = 2;
     */
    pageInfo?: PageInfo;
}
/**
 * @generated from protobuf enum markets.MarketStatus
 */
export enum MarketStatus {
    /**
     * @generated from protobuf enum value: UNSPECIFIED_MARKET_STATUS = 0;
     */
    UNSPECIFIED_MARKET_STATUS = 0,
    /**
     * @generated from protobuf enum value: OPEN = 1;
     */
    OPEN = 1,
    /**
     * @generated from protobuf enum value: CLOSED = 2;
     */
    CLOSED = 2,
    /**
     * @generated from protobuf enum value: SETTLED = 3;
     */
    SETTLED = 3
}
/**
 * @generated from protobuf enum markets.Outcome
 */
export enum Outcome {
    /**
     * @generated from protobuf enum value: UNSPECIFIED_OUTCOME = 0;
     */
    UNSPECIFIED_OUTCOME = 0,
    /**
     * @generated from protobuf enum value: YES = 1;
     */
    YES = 1,
    /**
     * @generated from protobuf enum value: NO = 2;
     */
    NO = 2,
    /**
     * @generated from protobuf enum value: UNSPECIFIED = 3;
     */
    UNSPECIFIED = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Market$Type extends MessageType<Market> {
    constructor() {
        super("markets.Market", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "logo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "status", kind: "enum", T: () => ["markets.MarketStatus", MarketStatus] },
            { no: 6, name: "liquidity_b", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "final_outcome", kind: "enum", T: () => ["markets.Outcome", Outcome] },
            { no: 8, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Market>): Market {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.description = "";
        message.logo = "";
        message.status = 0;
        message.liquidityB = 0;
        message.finalOutcome = 0;
        message.createdAt = "";
        message.updatedAt = "";
        if (value !== undefined)
            reflectionMergePartial<Market>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Market): Market {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* string logo */ 4:
                    message.logo = reader.string();
                    break;
                case /* markets.MarketStatus status */ 5:
                    message.status = reader.int32();
                    break;
                case /* double liquidity_b */ 6:
                    message.liquidityB = reader.double();
                    break;
                case /* markets.Outcome final_outcome */ 7:
                    message.finalOutcome = reader.int32();
                    break;
                case /* string created_at */ 8:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 9:
                    message.updatedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Market, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* string logo = 4; */
        if (message.logo !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.logo);
        /* markets.MarketStatus status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).int32(message.status);
        /* double liquidity_b = 6; */
        if (message.liquidityB !== 0)
            writer.tag(6, WireType.Bit64).double(message.liquidityB);
        /* markets.Outcome final_outcome = 7; */
        if (message.finalOutcome !== 0)
            writer.tag(7, WireType.Varint).int32(message.finalOutcome);
        /* string created_at = 8; */
        if (message.createdAt !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 9; */
        if (message.updatedAt !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message markets.Market
 */
export const Market = new Market$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPaginatedMarketResponse$Type extends MessageType<GetPaginatedMarketResponse> {
    constructor() {
        super("markets.GetPaginatedMarketResponse", [
            { no: 1, name: "markets", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Market },
            { no: 2, name: "pageInfo", kind: "message", T: () => PageInfo }
        ]);
    }
    create(value?: PartialMessage<GetPaginatedMarketResponse>): GetPaginatedMarketResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.markets = [];
        if (value !== undefined)
            reflectionMergePartial<GetPaginatedMarketResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPaginatedMarketResponse): GetPaginatedMarketResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated markets.Market markets */ 1:
                    message.markets.push(Market.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* common.PageInfo pageInfo */ 2:
                    message.pageInfo = PageInfo.internalBinaryRead(reader, reader.uint32(), options, message.pageInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPaginatedMarketResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated markets.Market markets = 1; */
        for (let i = 0; i < message.markets.length; i++)
            Market.internalBinaryWrite(message.markets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* common.PageInfo pageInfo = 2; */
        if (message.pageInfo)
            PageInfo.internalBinaryWrite(message.pageInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message markets.GetPaginatedMarketResponse
 */
export const GetPaginatedMarketResponse = new GetPaginatedMarketResponse$Type();
/**
 * @generated ServiceType for protobuf service markets.MarketService
 */
export const MarketService = new ServiceType("markets.MarketService", [
    { name: "GetMarketData", options: {}, I: PageRequest, O: GetPaginatedMarketResponse }
]);
