// @generated by protobuf-ts 2.10.0 with parameter generate_dependencies,long_type_number
// @generated from protobuf file "ws_server/market_price.proto" (package "ws_market_price", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * stringified payload linked to -> (string params) in WsData
 *
 * @generated from protobuf message ws_market_price.WsParamsPayload
 */
export interface WsParamsPayload {
    /**
     * @generated from protobuf field: string market_id = 1;
     */
    marketId: string;
    /**
     * @generated from protobuf field: double yes_price = 2;
     */
    yesPrice: number;
    /**
     * @generated from protobuf field: double no_price = 3;
     */
    noPrice: number;
    /**
     * @generated from protobuf field: uint64 timestamp = 4;
     */
    timestamp: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class WsParamsPayload$Type extends MessageType<WsParamsPayload> {
    constructor() {
        super("ws_market_price.WsParamsPayload", [
            { no: 1, name: "market_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "yes_price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "no_price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<WsParamsPayload>): WsParamsPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.marketId = "";
        message.yesPrice = 0;
        message.noPrice = 0;
        message.timestamp = 0;
        if (value !== undefined)
            reflectionMergePartial<WsParamsPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WsParamsPayload): WsParamsPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string market_id */ 1:
                    message.marketId = reader.string();
                    break;
                case /* double yes_price */ 2:
                    message.yesPrice = reader.double();
                    break;
                case /* double no_price */ 3:
                    message.noPrice = reader.double();
                    break;
                case /* uint64 timestamp */ 4:
                    message.timestamp = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WsParamsPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string market_id = 1; */
        if (message.marketId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.marketId);
        /* double yes_price = 2; */
        if (message.yesPrice !== 0)
            writer.tag(2, WireType.Bit64).double(message.yesPrice);
        /* double no_price = 3; */
        if (message.noPrice !== 0)
            writer.tag(3, WireType.Bit64).double(message.noPrice);
        /* uint64 timestamp = 4; */
        if (message.timestamp !== 0)
            writer.tag(4, WireType.Varint).uint64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ws_market_price.WsParamsPayload
 */
export const WsParamsPayload = new WsParamsPayload$Type();
