// @generated by protobuf-ts 2.10.0 with parameter generate_dependencies,long_type_number
// @generated from protobuf file "ws_server/common.proto" (package "ws_common_types", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ws_common_types.WsMessage
 */
export interface WsMessage {
    /**
     * @generated from protobuf field: optional string id = 1;
     */
    id?: string;
    /**
     * @generated from protobuf field: ws_common_types.Payload payload = 2;
     */
    payload?: Payload;
}
/**
 * wrapped data payload
 *
 * @generated from protobuf message ws_common_types.Payload
 */
export interface Payload {
    /**
     * @generated from protobuf field: ws_common_types.OperationType ops = 1;
     */
    ops: OperationType;
    /**
     * @generated from protobuf field: ws_common_types.WsData data = 2;
     */
    data?: WsData;
}
/**
 * data to send to the channel
 *
 * @generated from protobuf message ws_common_types.WsData
 */
export interface WsData {
    /**
     * @generated from protobuf field: ws_common_types.Channel channel = 1;
     */
    channel: Channel;
    /**
     * @generated from protobuf field: string params = 2;
     */
    params: string;
}
// sample payload (note this type of payload is only send by internal services, not by clients):

// 
// {
// "id":"ArshilIsLegend",
// "params":{
// "ops": "Subscribe",
// "data": {
// "channel": "price_update:67df943a-09a5-4ddb-adeb-11042c37c32e"
// }
// }
// }

/**
 * @generated from protobuf enum ws_common_types.OperationType
 */
export enum OperationType {
    /**
     * @generated from protobuf enum value: SUBSCRIBE = 0;
     */
    SUBSCRIBE = 0,
    /**
     * @generated from protobuf enum value: UNSUBSCRIBE = 1;
     */
    UNSUBSCRIBE = 1,
    /**
     * @generated from protobuf enum value: POST = 2;
     */
    POST = 2,
    /**
     * @generated from protobuf enum value: HANDSHAKE = 3;
     */
    HANDSHAKE = 3
}
/**
 * @generated from protobuf enum ws_common_types.Channel
 */
export enum Channel {
    /**
     * @generated from protobuf enum value: PRICEUPDATE = 0;
     */
    PRICEUPDATE = 0,
    /**
     * @generated from protobuf enum value: PRICEPOSTER = 1;
     */
    PRICEPOSTER = 1,
    /**
     * @generated from protobuf enum value: ORDERSERVICE = 2;
     */
    ORDERSERVICE = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class WsMessage$Type extends MessageType<WsMessage> {
    constructor() {
        super("ws_common_types.WsMessage", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "payload", kind: "message", T: () => Payload }
        ]);
    }
    create(value?: PartialMessage<WsMessage>): WsMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<WsMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WsMessage): WsMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string id */ 1:
                    message.id = reader.string();
                    break;
                case /* ws_common_types.Payload payload */ 2:
                    message.payload = Payload.internalBinaryRead(reader, reader.uint32(), options, message.payload);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WsMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* ws_common_types.Payload payload = 2; */
        if (message.payload)
            Payload.internalBinaryWrite(message.payload, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ws_common_types.WsMessage
 */
export const WsMessage = new WsMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Payload$Type extends MessageType<Payload> {
    constructor() {
        super("ws_common_types.Payload", [
            { no: 1, name: "ops", kind: "enum", T: () => ["ws_common_types.OperationType", OperationType] },
            { no: 2, name: "data", kind: "message", T: () => WsData }
        ]);
    }
    create(value?: PartialMessage<Payload>): Payload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ops = 0;
        if (value !== undefined)
            reflectionMergePartial<Payload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Payload): Payload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ws_common_types.OperationType ops */ 1:
                    message.ops = reader.int32();
                    break;
                case /* ws_common_types.WsData data */ 2:
                    message.data = WsData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Payload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ws_common_types.OperationType ops = 1; */
        if (message.ops !== 0)
            writer.tag(1, WireType.Varint).int32(message.ops);
        /* ws_common_types.WsData data = 2; */
        if (message.data)
            WsData.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ws_common_types.Payload
 */
export const Payload = new Payload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WsData$Type extends MessageType<WsData> {
    constructor() {
        super("ws_common_types.WsData", [
            { no: 1, name: "channel", kind: "enum", T: () => ["ws_common_types.Channel", Channel] },
            { no: 2, name: "params", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WsData>): WsData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.channel = 0;
        message.params = "";
        if (value !== undefined)
            reflectionMergePartial<WsData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WsData): WsData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ws_common_types.Channel channel */ 1:
                    message.channel = reader.int32();
                    break;
                case /* string params */ 2:
                    message.params = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WsData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ws_common_types.Channel channel = 1; */
        if (message.channel !== 0)
            writer.tag(1, WireType.Varint).int32(message.channel);
        /* string params = 2; */
        if (message.params !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.params);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ws_common_types.WsData
 */
export const WsData = new WsData$Type();
