// @generated by protobuf-ts 2.10.0 with parameter generate_dependencies,long_type_number
// @generated from protobuf file "ws_server/order_book.proto" (package "order_book", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * which price, how many shares (total quantity) and how many users on same price (histogram)
 *
 * @generated from protobuf message order_book.OrderLevel
 */
export interface OrderLevel {
    /**
     * @generated from protobuf field: double price = 1;
     */
    price: number;
    /**
     * @generated from protobuf field: double shares = 2;
     */
    shares: number;
    /**
     * @generated from protobuf field: uint32 users = 3;
     */
    users: number;
}
/**
 * @generated from protobuf message order_book.OrderBook
 */
export interface OrderBook {
    /**
     * @generated from protobuf field: repeated order_book.OrderLevel bids = 2;
     */
    bids: OrderLevel[];
    /**
     * @generated from protobuf field: repeated order_book.OrderLevel asks = 3;
     */
    asks: OrderLevel[];
}
/**
 * @generated from protobuf message order_book.MarketBook
 */
export interface MarketBook {
    /**
     * @generated from protobuf field: string market_id = 1;
     */
    marketId: string;
    /**
     * @generated from protobuf field: order_book.OrderBook yes_book = 2;
     */
    yesBook?: OrderBook;
    /**
     * @generated from protobuf field: order_book.OrderBook no_book = 3;
     */
    noBook?: OrderBook;
}
// @generated message type with reflection information, may provide speed optimized methods
class OrderLevel$Type extends MessageType<OrderLevel> {
    constructor() {
        super("order_book.OrderLevel", [
            { no: 1, name: "price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "shares", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "users", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<OrderLevel>): OrderLevel {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.price = 0;
        message.shares = 0;
        message.users = 0;
        if (value !== undefined)
            reflectionMergePartial<OrderLevel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderLevel): OrderLevel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double price */ 1:
                    message.price = reader.double();
                    break;
                case /* double shares */ 2:
                    message.shares = reader.double();
                    break;
                case /* uint32 users */ 3:
                    message.users = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderLevel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double price = 1; */
        if (message.price !== 0)
            writer.tag(1, WireType.Bit64).double(message.price);
        /* double shares = 2; */
        if (message.shares !== 0)
            writer.tag(2, WireType.Bit64).double(message.shares);
        /* uint32 users = 3; */
        if (message.users !== 0)
            writer.tag(3, WireType.Varint).uint32(message.users);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message order_book.OrderLevel
 */
export const OrderLevel = new OrderLevel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderBook$Type extends MessageType<OrderBook> {
    constructor() {
        super("order_book.OrderBook", [
            { no: 2, name: "bids", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => OrderLevel },
            { no: 3, name: "asks", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => OrderLevel }
        ]);
    }
    create(value?: PartialMessage<OrderBook>): OrderBook {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bids = [];
        message.asks = [];
        if (value !== undefined)
            reflectionMergePartial<OrderBook>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderBook): OrderBook {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated order_book.OrderLevel bids */ 2:
                    message.bids.push(OrderLevel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated order_book.OrderLevel asks */ 3:
                    message.asks.push(OrderLevel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderBook, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated order_book.OrderLevel bids = 2; */
        for (let i = 0; i < message.bids.length; i++)
            OrderLevel.internalBinaryWrite(message.bids[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated order_book.OrderLevel asks = 3; */
        for (let i = 0; i < message.asks.length; i++)
            OrderLevel.internalBinaryWrite(message.asks[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message order_book.OrderBook
 */
export const OrderBook = new OrderBook$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarketBook$Type extends MessageType<MarketBook> {
    constructor() {
        super("order_book.MarketBook", [
            { no: 1, name: "market_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "yes_book", kind: "message", T: () => OrderBook },
            { no: 3, name: "no_book", kind: "message", T: () => OrderBook }
        ]);
    }
    create(value?: PartialMessage<MarketBook>): MarketBook {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.marketId = "";
        if (value !== undefined)
            reflectionMergePartial<MarketBook>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarketBook): MarketBook {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string market_id */ 1:
                    message.marketId = reader.string();
                    break;
                case /* order_book.OrderBook yes_book */ 2:
                    message.yesBook = OrderBook.internalBinaryRead(reader, reader.uint32(), options, message.yesBook);
                    break;
                case /* order_book.OrderBook no_book */ 3:
                    message.noBook = OrderBook.internalBinaryRead(reader, reader.uint32(), options, message.noBook);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarketBook, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string market_id = 1; */
        if (message.marketId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.marketId);
        /* order_book.OrderBook yes_book = 2; */
        if (message.yesBook)
            OrderBook.internalBinaryWrite(message.yesBook, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* order_book.OrderBook no_book = 3; */
        if (message.noBook)
            OrderBook.internalBinaryWrite(message.noBook, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message order_book.MarketBook
 */
export const MarketBook = new MarketBook$Type();
