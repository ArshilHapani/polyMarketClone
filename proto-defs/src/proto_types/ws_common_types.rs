// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WsMessage {
    #[prost(string, optional, tag = "1")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "2")]
    pub payload: ::core::option::Option<Payload>,
}
/// wrapped data payload
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Payload {
    #[prost(enumeration = "OperationType", tag = "1")]
    pub ops: i32,
    #[prost(message, optional, tag = "2")]
    pub data: ::core::option::Option<WsData>,
}
/// data to send to the channel
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WsData {
    #[prost(enumeration = "Channel", tag = "1")]
    pub channel: i32,
    #[prost(string, tag = "2")]
    pub params: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OperationType {
    Subscribe = 0,
    Unsubscribe = 1,
    Post = 2,
    Handshake = 3,
}
impl OperationType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Subscribe => "SUBSCRIBE",
            Self::Unsubscribe => "UNSUBSCRIBE",
            Self::Post => "POST",
            Self::Handshake => "HANDSHAKE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SUBSCRIBE" => Some(Self::Subscribe),
            "UNSUBSCRIBE" => Some(Self::Unsubscribe),
            "POST" => Some(Self::Post),
            "HANDSHAKE" => Some(Self::Handshake),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Channel {
    Priceupdate = 0,
    Priceposter = 1,
    Orderservice = 2,
}
impl Channel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Priceupdate => "PRICEUPDATE",
            Self::Priceposter => "PRICEPOSTER",
            Self::Orderservice => "ORDERSERVICE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PRICEUPDATE" => Some(Self::Priceupdate),
            "PRICEPOSTER" => Some(Self::Priceposter),
            "ORDERSERVICE" => Some(Self::Orderservice),
            _ => None,
        }
    }
}
