// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPriceDataWithinIntervalRequest {
    #[prost(string, tag = "1")]
    pub market_id: ::prost::alloc::string::String,
    #[prost(enumeration = "Timeframe", tag = "2")]
    pub timeframe: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PriceData {
    #[prost(double, tag = "1")]
    pub yes_price: f64,
    #[prost(double, tag = "2")]
    pub no_price: f64,
    #[prost(uint64, tag = "3")]
    pub timestamp: u64,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMarketPriceDataWithinIntervalResponse {
    #[prost(message, repeated, tag = "1")]
    pub price_data: ::prost::alloc::vec::Vec<PriceData>,
    #[prost(string, tag = "2")]
    pub market_id: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Timeframe {
    Unspecified = 0,
    OneHour = 1,
    SixHour = 2,
    OneDay = 3,
    OneWeek = 4,
    OneMonth = 5,
    All = 6,
}
impl Timeframe {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "TIMEFRAME_UNSPECIFIED",
            Self::OneHour => "TIMEFRAME_ONE_HOUR",
            Self::SixHour => "TIMEFRAME_SIX_HOUR",
            Self::OneDay => "TIMEFRAME_ONE_DAY",
            Self::OneWeek => "TIMEFRAME_ONE_WEEK",
            Self::OneMonth => "TIMEFRAME_ONE_MONTH",
            Self::All => "TIMEFRAME_ALL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TIMEFRAME_UNSPECIFIED" => Some(Self::Unspecified),
            "TIMEFRAME_ONE_HOUR" => Some(Self::OneHour),
            "TIMEFRAME_SIX_HOUR" => Some(Self::SixHour),
            "TIMEFRAME_ONE_DAY" => Some(Self::OneDay),
            "TIMEFRAME_ONE_WEEK" => Some(Self::OneWeek),
            "TIMEFRAME_ONE_MONTH" => Some(Self::OneMonth),
            "TIMEFRAME_ALL" => Some(Self::All),
            _ => None,
        }
    }
}
/// Generated server implementations.
pub mod price_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with PriceServiceServer.
    #[async_trait]
    pub trait PriceService: std::marker::Send + std::marker::Sync + 'static {
        async fn get_price_data_within_interval(
            &self,
            request: tonic::Request<super::GetPriceDataWithinIntervalRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetMarketPriceDataWithinIntervalResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct PriceServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> PriceServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for PriceServiceServer<T>
    where
        T: PriceService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/price.PriceService/GetPriceDataWithinInterval" => {
                    #[allow(non_camel_case_types)]
                    struct GetPriceDataWithinIntervalSvc<T: PriceService>(pub Arc<T>);
                    impl<
                        T: PriceService,
                    > tonic::server::UnaryService<
                        super::GetPriceDataWithinIntervalRequest,
                    > for GetPriceDataWithinIntervalSvc<T> {
                        type Response = super::GetMarketPriceDataWithinIntervalResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::GetPriceDataWithinIntervalRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PriceService>::get_price_data_within_interval(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetPriceDataWithinIntervalSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for PriceServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "price.PriceService";
    impl<T> tonic::server::NamedService for PriceServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
